#! /usr/bin/env bash

SCRIPTNAME="$(basename "$0")"

SAVED_ARGS="$@"

# Check if PKGSCRIPT exists in the current directory and exit if not
if [ ! -f PKGSCRIPT ]; then
    echo "PKGSCRIPT not found in current directory"
    exit 1
fi


# Source the PKGSCRIPT
. PKGSCRIPT
PKGSCRIPTDIR="$(pwd)"

# Package building functions

function make_package() {
    echo "=== Building ${NAME} v${VERSION}-${EPOCH} ==="
    cd ${PKGSCRIPTDIR}

    mkdir -p "${NAME}-${VERSION}-${EPOCH}"
    cd "${NAME}-${VERSION}-${EPOCH}"
    mkdir -p export/data

    WORKDIR="$(pwd)"
    BUILD_DATA_ROOT="${WORKDIR}/export/data"
    BUILD_ROOT="${WORKDIR}/export"

    # Download from SRC array with curl
    for i in "${!SRC[@]}"; do
        echo "=== Downloading from ${SRC[$i]} ==="
        curl -L "${SRC[$i]}" -o "$(basename ${SRC[$i]})"
        
        # Verify the download with a checksum from SUM array
        if [ "${SUM_TYPE}" = "sha512" ]; then
            if  ! [ "${SUM[i]}" = "$(sha512sum "$(basename ${SRC[$i]})" | cut -d ' ' -f 1)" ]; then
                echo "=== Checksum mismatch! ==="
                exit 1
            fi
        elif [ "${SUM_TYPE}" = "sha256" ]; then
            if ! [ "${SUM[i]}" = "$(sha256sum "$(basename ${SRC[$i]})" | cut -d ' ' -f 1)" ]; then
                echo "=== Checksum mismatch! ==="
                exit 1
            fi
        elif [ "${SUM_TYPE}" = "md5" ]; then
            if ! [ "${SUM[i]}" = "$(md5sum "$(basename ${SRC[$i]})" | cut -d ' ' -f 1)" ]; then
                echo "=== Checksum mismatch! ==="
                exit 1
            fi
        fi

        # If the downloaded file is a tarball or a zip, extract it
        if [ "$(file -b --mime-type "$(basename ${SRC[$i]})" | cut -d '/' -f 1)" = "application" ]; then
            if [ "$(file -b --mime-type "$(basename ${SRC[$i]})" | cut -d '/' -f 2)" = "gzip" ]; then
                echo "=== Extracting $(basename ${SRC[$i]}) ==="
                tar xzf "$(basename ${SRC[$i]})"
            elif [ "$(file -b --mime-type "$(basename ${SRC[$i]})" | cut -d '/' -f 2)" = "x-xz" ]; then
                echo "=== Extracting $(basename ${SRC[$i]}) ==="
                tar xJf "$(basename ${SRC[$i]})"
            elif [ "$(file -b --mime-type "$(basename ${SRC[$i]})" | cut -d '/' -f 2)" = "x-bzip2" ]; then
                echo "=== Extracting $(basename ${SRC[$i]}) ==="
                tar xjf "$(basename ${SRC[$i]})"
            elif [ "$(file -b --mime-type "$(basename ${SRC[$i]})" | cut -d '/' -f 2)" = "x-tar" ]; then
                echo "=== Extracting $(basename ${SRC[$i]}) ==="
                tar xf "$(basename ${SRC[$i]})"
            elif [ "$(file -b --mime-type "$(basename ${SRC[$i]})" | cut -d '/' -f 2)" = "zip" ]; then
                echo "=== Extracting $(basename ${SRC[$i]}) ==="
                unzip "$(basename ${SRC[$i]})"
            fi
        fi
    done    

    cd ${WORKDIR}
    prepare || echo "=== Skipping prepare... ==="
    cd ${WORKDIR}
    build || echo "=== Skipping build... ==="

    # Enter fakeroot to do the packaging
    enter_fakeroot

    cd ${WORKDIR}

    # Compress the build data root into the package
    echo "=== Compressing ${NAME}-${VERSION}-${EPOCH} ==="

    cd ${BUILD_DATA_ROOT}

    tar cf "${BUILD_ROOT}/data.tar" ./*

    xz "${BUILD_ROOT}/data.tar"
    DATA_SHA=$(sha512sum "${BUILD_ROOT}/data.tar.xz" | cut -d ' ' -f 1)

    cd ${BUILD_ROOT}
    cat << EOL > PKG
{
    "name": "${NAME}",
    "version": "${VERSION}",
    "epoch": ${EPOCH},
    "description": "${DESC}",
    "groups": "$(join_by , "${GRPS[@]}")",
    "url": "${URL}",
    "license": "$(join_by , "${LICENSES[@]}")",
    "depends": "$(join_by , "${DEPENDS[@]}")",
    "optional_depends": "$(join_by , "${OPT_DEPENDS[@]}")",
    "provides": "$(join_by , "${PROVIDES[@]}")",
    "conflicts": "$(join_by , "${CONFLICTS[@]}")",
    "replaces": "$(join_by , "${REPLACES[@]}")",
    "sha512sum": "${DATA_SHA}"
}
EOL

    tar cf "${PKGSCRIPTDIR}/${NAME}-${VERSION}-${EPOCH}.tar" PKG data.tar.xz
    xz "${PKGSCRIPTDIR}/${NAME}-${VERSION}-${EPOCH}.tar"

    echo "=== Done building ${NAME} v${VERSION}-${EPOCH}, see ${PKGSCRIPTDIR}/${NAME}-${VERSION}-${EPOCH}.tar.xz ==="

    return 0
}

function install_package() {
    echo "=== Installing ${NAME} v${VERSION}-${EPOCH} ==="
    cd ${PKGSCRIPTDIR}

    bulge li "${NAME}-${VERSION}-${EPOCH}.tar.xz"

    return 0
}

# Clean the package build directory
function clean_package() {
    echo "=== Cleaning ${NAME} v${VERSION}-${EPOCH} ==="
    cd ${PKGSCRIPTDIR}

    rm -r "${NAME}-${VERSION}-${EPOCH}"
    rm "${NAME}-${VERSION}-${EPOCH}.tar.xz"

    return 0
}

function do_fakeroot_package() {
    cd "${NAME}-${VERSION}-${EPOCH}"

    WORKDIR="$(pwd)"
    BUILD_DATA_ROOT="${WORKDIR}/export/data"
    BUILD_ROOT="${WORKDIR}/export"

    cd ${WORKDIR}
    postbuild || echo "=== Skipping postbuild... ==="

    return 0;
}

function create_PKGINFO() {
    cat << EOL > PKGINFO
{
    "name": "${NAME}",
    "version": "${VERSION}",
    "epoch": ${EPOCH},
    "description": "${DESC}",
    "groups": $(jsonify "${GRPS[@]}"),
    "url": "${URL}",
    "license": $(jsonify "${LICENSES[@]}"),
    "depends": $(jsonify "${DEPENDS[@]}"),
    "optional_depends": $(jsonify "${OPT_DEPENDS[@]}"),
    "make_depends": $(jsonify "${MK_DEPENDS[@]}"),
    "provides": $(jsonify "${PROVIDES[@]}"),
    "conflicts": $(jsonify "${CONFLICTS[@]}"),
    "replaces": $(jsonify "${REPLACES[@]}"),
    "maintainers": $(jsonify "${MAINTAINERS[@]}")
}
EOL
}

# Misc functions

function join_by { 
    local d=${1-} f=${2-}; 
    if shift 2; 
    then 
        printf %s "$f" "${@/#/$d}"; 
    fi; 
}

function jsonify {
    echo -n '['
    while [ $# -gt 0 ]; do
        x=${1//\\/\\\\}
        echo -n \"${x//\"/\\\"}\"
        [ $# -gt 1 ] && echo -n ', '
        shift
    done
    echo ']'
}

enter_fakeroot() {
	echo "=== Entering fakeroot ==="
    
    cd ${PKGSCRIPTDIR}
	fakeroot -- bash -$- "${BASH_SOURCE[0]}" -f || return $?
}

function help() {
    echo "Usage: ${SCRIPTNAME} [OPTIONS]"
    echo "Options:"
    echo "  -h"
    echo "      Print this help message"
    echo "  -b"
    echo "      Build a package based on the PKGSCRIPT in the current working directory"
    echo "  -i"
    echo "      Install the built package"
    echo "  -c"
    echo "      Clean the package build directory"
}

# Get runtime flags
while getopts ":hbicpf" opt; do
    case $opt in
        h)
            help
            exit 0
            ;;
        b)
            make_package
            ;;
        i)
            install_package
            ;;
        c)
            clean_package
            ;;
        p)
            create_PKGINFO
            ;;
        f)
            cd "${PKGSCRIPTDIR}"
            do_fakeroot_package
            echo "=== Exiting fakeroot ==="
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Exit the program if no flags are set
if [ $OPTIND -eq 1 ]; then
    echo "No flags set!"
    help
    exit 1
fi